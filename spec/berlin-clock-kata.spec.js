// Generated by CoffeeScript 1.3.3
(function() {

  describe("BerlinClock Top Light", function() {
    it('parses our numbers correctly', function() {
      this.clock = new BerlinClock("00:01:02");
      expect(this.clock.hours).toEqual(0);
      expect(this.clock.minutes).toEqual(1);
      return expect(this.clock.seconds).toEqual(2);
    });
    it('gives us a yellow top light when the seconds are even', function() {
      this.clock = new BerlinClock("00:00:00");
      return expect(this.clock.topLight()).toEqual("Y");
    });
    it('give us a off top light when the seconds are odd', function() {
      this.clock = new BerlinClock("00:00:01");
      return expect(this.clock.topLight()).toEqual("O");
    });
    return it('give us a off top light when the seconds are odd', function() {
      this.clock = new BerlinClock("00:00:01");
      return expect(this.clock.topLight()).toEqual("O");
    });
  });

  describe("BerlinClock 5-Hour Lights", function() {
    it('gives us no 5-hour lights for hours less than 5', function() {
      this.clock = new BerlinClock("00:00:00");
      return expect(this.clock.fiveHourLights()).toEqual(["O", "O", "O", "O"]);
    });
    it('gives us 1 red 5-hour light for hours between 5 and 10', function() {
      this.clock = new BerlinClock("05:00:00");
      return expect(this.clock.fiveHourLights()).toEqual(["R", "O", "O", "O"]);
    });
    it('gives us 2 red 5-hour lights for hours between 10 and 15', function() {
      this.clock = new BerlinClock("10:00:00");
      return expect(this.clock.fiveHourLights()).toEqual(["R", "R", "O", "O"]);
    });
    it('gives us 3 red 5-hour lights for hours between 15 and 20', function() {
      this.clock = new BerlinClock("15:00:00");
      return expect(this.clock.fiveHourLights()).toEqual(["R", "R", "R", "O"]);
    });
    return it('gives us 4 red 5-hour lights for hours 20 and over', function() {
      this.clock = new BerlinClock("20:00:00");
      return expect(this.clock.fiveHourLights()).toEqual(["R", "R", "R", "R"]);
    });
  });

  describe("BerlinClock 1-Hour Lights", function() {
    it('gives us no 1-hour lights for hours evenly divisible by 5', function() {
      this.clock = new BerlinClock("00:00:00");
      return expect(this.clock.hourLights()).toEqual(["O", "O", "O", "O"]);
    });
    it('gives us 1 1-hour lights for hours mod 5 remainder 1', function() {
      this.clock = new BerlinClock("01:00:00");
      return expect(this.clock.hourLights()).toEqual(["R", "O", "O", "O"]);
    });
    it('gives us 2 1-hour lights for hours mod 5 remainder 2', function() {
      this.clock = new BerlinClock("02:00:00");
      return expect(this.clock.hourLights()).toEqual(["R", "R", "O", "O"]);
    });
    it('gives us 3 1-hour lights for hours mod 5 remainder 3', function() {
      this.clock = new BerlinClock("03:00:00");
      return expect(this.clock.hourLights()).toEqual(["R", "R", "R", "O"]);
    });
    return it('gives us 4 1-hour lights for hours mod 5 remainder 4', function() {
      this.clock = new BerlinClock("04:00:00");
      return expect(this.clock.hourLights()).toEqual(["R", "R", "R", "R"]);
    });
  });

  describe("BerlinClock 5-Minute Lights", function() {
    it('gives us no 5-minute lights for minutes less than 5', function() {
      this.clock = new BerlinClock("00:00:00");
      return expect(this.clock.fiveMinuteLights()).toEqual(["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]);
    });
    it('gives us 1 yellow 5-minute lights for minutes between 5 and 10', function() {
      this.clock = new BerlinClock("00:06:00");
      return expect(this.clock.fiveMinuteLights()).toEqual(["Y", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]);
    });
    it('gives us 2 yellow 5-minute lights for minutes between 10 and 15', function() {
      this.clock = new BerlinClock("00:11:00");
      return expect(this.clock.fiveMinuteLights()).toEqual(["Y", "Y", "O", "O", "O", "O", "O", "O", "O", "O", "O"]);
    });
    it('gives us 2 yellow and 1 red 5-minute lights for minutes between 15 and 20', function() {
      this.clock = new BerlinClock("00:16:00");
      return expect(this.clock.fiveMinuteLights()).toEqual(["Y", "Y", "R", "O", "O", "O", "O", "O", "O", "O", "O"]);
    });
    return it('gives us YYRYYRYYRYY 5-minute lights for minutes past 55', function() {
      this.clock = new BerlinClock("00:59:00");
      return expect(this.clock.fiveMinuteLights()).toEqual(["Y", "Y", "R", "Y", "Y", "R", "Y", "Y", "R", "Y", "Y"]);
    });
  });

  describe("BerlinClock 1-Minute Lights", function() {
    it('gives us no 1-minute lights for minutes evenly divisible by 5', function() {
      this.clock = new BerlinClock("00:00:00");
      return expect(this.clock.minuteLights()).toEqual(["O", "O", "O", "O"]);
    });
    it('gives us 1 1-minute lights for minutes mod 5 remainder 1', function() {
      this.clock = new BerlinClock("01:00:00");
      return expect(this.clock.minuteLights()).toEqual(["Y", "O", "O", "O"]);
    });
    it('gives us 2 1-minute lights for minutes mod 5 remainder 2', function() {
      this.clock = new BerlinClock("02:00:00");
      return expect(this.clock.minuteLights()).toEqual(["Y", "Y", "O", "O"]);
    });
    it('gives us 3 1-minute lights for minutes mod 5 remainder 3', function() {
      this.clock = new BerlinClock("03:00:00");
      return expect(this.clock.minuteLights()).toEqual(["Y", "Y", "Y", "O"]);
    });
    return it('gives us 4 1-minute lights for minutes mod 5 remainder 4', function() {
      this.clock = new BerlinClock("04:00:00");
      return expect(this.clock.minuteLights()).toEqual(["Y", "Y", "Y", "Y"]);
    });
  });

}).call(this);
