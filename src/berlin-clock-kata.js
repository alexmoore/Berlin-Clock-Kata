// Generated by CoffeeScript 1.3.3
(function() {
  var BerlinClock;

  Array.prototype.clone = function() {
    var cloned, i, _i, _len;
    cloned = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      i = this[_i];
      cloned.push(i);
    }
    return cloned;
  };

  BerlinClock = (function() {
    var minuteLightsPattern, o, r, y;

    r = 'R';

    y = 'Y';

    o = 'O';

    minuteLightsPattern = [y, y, r];

    function BerlinClock(time) {
      var _ref;
      _ref = time.split(':').map(function(t) {
        return parseInt(t);
      }), this.hours = _ref[0], this.minutes = _ref[1], this.seconds = _ref[2];
    }

    BerlinClock.prototype.topLight = function() {
      if (this.seconds % 2 === 0) {
        return y;
      } else {
        return o;
      }
    };

    BerlinClock.prototype.fiveHourLights = function() {
      var stops, x;
      stops = (function() {
        var _i, _results;
        _results = [];
        for (x = _i = 5; _i <= 20; x = _i += 5) {
          _results.push(x);
        }
        return _results;
      })();
      return this.yieldLightsGt(this.hours, (function() {
        return r;
      }), stops);
    };

    BerlinClock.prototype.hourLights = function() {
      return this.yieldLightsMod(this.hours, r, 5);
    };

    BerlinClock.prototype.fiveMinuteLights = function() {
      var stops, x;
      stops = (function() {
        var _i, _results;
        _results = [];
        for (x = _i = 5; _i <= 55; x = _i += 5) {
          _results.push(x);
        }
        return _results;
      })();
      return this.yieldLightsGt(this.minutes, this.minuteLightsStream(), stops);
    };

    BerlinClock.prototype.minuteLights = function() {
      return this.yieldLightsMod(this.hours, y, 5);
    };

    BerlinClock.prototype.yieldLightsGt = function(amount, lightFn, bounds) {
      return bounds.map(function(b) {
        if (amount >= b) {
          return lightFn();
        } else {
          return o;
        }
      });
    };

    BerlinClock.prototype.yieldLightsMod = function(amount, light, divisor) {
      var foo, i, numLights, _i, _ref;
      foo = [];
      numLights = amount % divisor;
      for (i = _i = 1, _ref = divisor - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        if (i <= numLights) {
          foo.push(light);
        } else {
          foo.push(o);
        }
      }
      return foo;
    };

    BerlinClock.prototype.minuteLightsStream = function() {
      var lights;
      lights = minuteLightsPattern.clone();
      return function() {
        var light;
        light = lights.shift();
        lights.push(light);
        return light;
      };
    };

    return BerlinClock;

  })();

  window.BerlinClock = BerlinClock;

}).call(this);
